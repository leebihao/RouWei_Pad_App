import java.text.SimpleDateFormat
import java.util.jar.JarEntry
import java.util.jar.JarOutputStream
import java.util.zip.Deflater

apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
    }

    sourceSets {

        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['jniLibs']
            assets.srcDirs = ['assets', 'src/main/assets']

        }

        // Move the tests to tests/java, tests/res, etc...
//        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    lintOptions {
        abortOnError false
    }

    defaultConfig {
        buildConfigField "String", "SDK_VERSION", "\"" +  getSDKGitCommitHash() + "\""
        buildConfigField "String", "SDK_BUILD_TIME", "\"" +  getCurrentTime() + "\""
        buildConfigField "String", "SDK_BUILD_HOST", "\"" +  getUserName() + "\""
        buildConfigField "String", "SDK_BUILD_OS", "\"" +  getOSName() + "\""
        useLibrary 'org.apache.http.legacy'
        minSdkVersion 14
        targetSdkVersion 17
    }
}

def manifestFile = android.sourceSets.main.manifest.srcFile

def packageName = new XmlParser().parse(manifestFile).attribute('package')

//定义一个生成Jar的t方法
def jarTask(String outputJarPath, String packageNamePath) {

    final String buildDirPath = buildDir.absolutePath;
    final String intermediate = 'intermediates' + File.separator + 'classes' + File.separator + 'release' + File.separator;
    final String filter1 = 'R.class';
    final String filter2 = 'R$';

    println 'jarTask... ' + buildDirPath

    try {

        File outputJar = new File(outputJarPath);
        if (outputJar.exists()) {
            outputJar.delete();
        }

        JarOutputStream jos = new JarOutputStream(new FileOutputStream(outputJar));
        jos.setLevel(Deflater.BEST_COMPRESSION);
        BufferedInputStream bis = null;
        byte[] cache = new byte[1024];

        File[] file = new File(buildDirPath, intermediate + packageNamePath).listFiles(
                new FileFilter() {
                    @Override
                    public boolean accept(File pathname) {
                        if (filter1.equals(pathname.getName()) || pathname.getName().startsWith(filter2)) {
                            return true;
                        }
                        return false;
                    }
                });

        for(int i=0; i< file.length; i++) {
            bis = new BufferedInputStream(new FileInputStream(file[i]), 1024);
            println file[i].getAbsolutePath().replace(buildDirPath + File.separator + intermediate, "")
            jos.putNextEntry(new JarEntry(file[i].getAbsolutePath().replace(buildDirPath + File.separator + intermediate, "")));
            int count;
            while((count = bis.read(cache, 0, 1024)) != -1) {
                jos.write(cache, 0, count);
            }
            jos.closeEntry();
            bis.close();
        }

        jos.flush();
        jos.close();

    } catch(Exception ex) {
        ex.printStackTrace();
    }
}

//assemble << {
//    //测试自定义task, 观察编译log里面是否有输出
//    println "###################Scinan SDK do last"
//    //生成R的jar包
//    jarTask(buildDir.absolutePath + File.separator + 'outputs' + File.separator + 'sdk.jar', packageName.replace('.', File.separator))
//
//}

dependencies {
    api fileTree(include: '*.jar', dir: 'libs')
    implementation 'org.apache.httpcomponents:httpclient-android:4.3.5'
    implementation('org.apache.httpcomponents:httpmime:4.5.11') {
        exclude module: 'httpclient'
    }
    implementation 'com.android.support:support-compat:28.0.0'
}

def getSDKGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    if (!new File(gitFolder).exists()) {
        return "";
    }
    def head = new File(gitFolder + "HEAD").text.split(":")
    def isCommit = head.length == 1
    if(isCommit) return head[0].trim()
    def refHead = new File(gitFolder + head[1].trim())
    refHead.text.trim()
}

def getCurrentTime() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US)
    sdf.format(new Date(java.lang.System.currentTimeMillis()))
}

def getUserName() {
    System.getProperty("user.name");
}

def getOSName() {
    System.getProperty("os.name");
}
